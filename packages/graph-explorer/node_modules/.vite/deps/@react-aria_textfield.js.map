{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@react-aria+textfield@3.6.1_react@17.0.2/node_modules/@react-aria/textfield/dist/packages/@react-aria/textfield/src/index.ts", "../../../../../node_modules/.pnpm/@react-aria+textfield@3.6.1_react@17.0.2/node_modules/@react-aria/textfield/dist/packages/@react-aria/textfield/src/useTextField.ts", "../../../../../node_modules/.pnpm/@react-aria+textfield@3.6.1_react@17.0.2/node_modules/@react-aria/textfield/dist/packages/@react-aria/textfield/src/useFormattedTextField.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useTextField';\nexport * from './useFormattedTextField';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {\n  ChangeEvent,\n  DOMFactory,\n  HTMLAttributes,\n  LabelHTMLAttributes,\n  ReactDOM,\n  RefObject\n} from 'react';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useField} from '@react-aria/label';\nimport {useFocusable} from '@react-aria/focus';\n\n/**\n * A map of HTML element names and their interface types.\n * For example `'a'` -> `HTMLAnchorElement`.\n */\ntype IntrinsicHTMLElements = {\n  [K in keyof IntrinsicHTMLAttributes]: IntrinsicHTMLAttributes[K] extends HTMLAttributes<infer T> ? T : never\n};\n\n/**\n * A map of HTML element names and their attribute interface types.\n * For example `'a'` -> `AnchorHTMLAttributes<HTMLAnchorElement>`.\n */\ntype IntrinsicHTMLAttributes = {\n  [K in keyof ReactDOM]: ReactDOM[K] extends DOMFactory<infer T, any> ? T : never\n};\n\ntype DefaultElementType = 'input';\n\n/**\n * The intrinsic HTML element names that `useTextField` supports; e.g. `input`,\n * `textarea`.\n */\ntype TextFieldIntrinsicElements = keyof Pick<IntrinsicHTMLElements, 'input' | 'textarea'>;\n\n /**\n  * The HTML element interfaces that `useTextField` supports based on what is\n  * defined for `TextFieldIntrinsicElements`; e.g. `HTMLInputElement`,\n  * `HTMLTextAreaElement`.\n  */\ntype TextFieldHTMLElementType = Pick<IntrinsicHTMLElements, TextFieldIntrinsicElements>;\n\n /**\n  * The HTML attributes interfaces that `useTextField` supports based on what\n  * is defined for `TextFieldIntrinsicElements`; e.g. `InputHTMLAttributes`,\n  * `TextareaHTMLAttributes`.\n  */\ntype TextFieldHTMLAttributesType = Pick<IntrinsicHTMLAttributes, TextFieldIntrinsicElements>;\n\n/**\n * The type of `inputProps` returned by `useTextField`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldInputProps<T extends TextFieldIntrinsicElements> = TextFieldHTMLAttributesType[T];\n\ninterface AriaTextFieldOptions<T extends TextFieldIntrinsicElements> extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: T\n}\n\n/**\n * The type of `ref` object that can be passed to `useTextField` based on the given\n * intrinsic HTML element name; e.g.`RefObject<HTMLInputElement>`,\n * `RefObject<HTMLTextAreaElement>`.\n */\ntype TextFieldRefObject<T extends TextFieldIntrinsicElements> = RefObject<TextFieldHTMLElementType[T]>;\n\nexport interface TextFieldAria<T extends TextFieldIntrinsicElements = DefaultElementType> {\n  /** Props for the input element. */\n  inputProps: TextFieldInputProps<T>,\n  /** Props for the text field's visible label element, if any. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the text field's description element, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n  /** Props for the text field's error message element, if any. */\n  errorMessageProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField<T extends TextFieldIntrinsicElements = DefaultElementType>(\n  props: AriaTextFieldOptions<T>,\n  ref: TextFieldRefObject<T>\n): TextFieldAria<T> {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  }: AriaTextFieldOptions<TextFieldIntrinsicElements> = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value: props.value,\n        defaultValue: props.value ? undefined : props.defaultValue,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n        autoComplete: props.autoComplete,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    ),\n    descriptionProps,\n    errorMessageProps\n  };\n}\n", "/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {mergeProps} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TextFieldAria, useTextField} from './useTextField';\n\ninterface FormattedTextFieldState {\n  validate: (val: string) => boolean,\n  setInputValue: (val: string) => void\n}\n\n\nfunction supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' &&\n    window.InputEvent &&\n    // @ts-ignore\n    typeof InputEvent.prototype.getTargetRanges === 'function';\n}\n\nexport function useFormattedTextField(props: AriaTextFieldProps, state: FormattedTextFieldState, inputRef: RefObject<HTMLInputElement>): TextFieldAria {\n\n  let stateRef = useRef(state);\n  stateRef.current = state;\n\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  useEffect(() => {\n    if (!supportsNativeBeforeInputEvent()) {\n      return;\n    }\n\n    let input = inputRef.current;\n\n    let onBeforeInput = (e: InputEvent) => {\n      let state = stateRef.current;\n\n      // Compute the next value of the input if the event is allowed to proceed.\n      // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n      let nextValue: string;\n      switch (e.inputType) {\n        case 'historyUndo':\n        case 'historyRedo':\n          // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n          // because presumably the input would have already been validated previously.\n          return;\n        case 'deleteContent':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentForward':\n          // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n          // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n          // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n          // If we support additional locales in the future, this may need to change.\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentBackward':\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteSoftLineBackward':\n        case 'deleteHardLineBackward':\n          nextValue = input.value.slice(input.selectionStart);\n          break;\n        default:\n          if (e.data != null) {\n            nextValue =\n              input.value.slice(0, input.selectionStart) +\n              e.data +\n              input.value.slice(input.selectionEnd);\n          }\n          break;\n      }\n\n      // If we did not compute a value, or the new value is invalid, prevent the event\n      // so that the browser does not update the input text, move the selection, or add to\n      // the undo/redo stack.\n      if (nextValue == null || !state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    };\n\n    input.addEventListener('beforeinput', onBeforeInput, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n\n  let onBeforeInput = !supportsNativeBeforeInputEvent()\n    ? e => {\n      let nextValue =\n        e.target.value.slice(0, e.target.selectionStart) +\n        e.data +\n        e.target.value.slice(e.target.selectionEnd);\n\n      if (!state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    }\n    : null;\n\n  let {labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps} = useTextField(props, inputRef);\n\n  let compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(\n      textFieldProps,\n      {\n        onBeforeInput,\n        onCompositionStart() {\n          // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n          // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n          // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n          // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n          // nor would we want to cancel them because the input from the user is incomplete at that point.\n          // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n          // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n          // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n          // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n          // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n          // are implemented, there is no other way to prevent composed input.\n          // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n          let {value, selectionStart, selectionEnd} = inputRef.current;\n          compositionStartState.current = {value, selectionStart, selectionEnd};\n        },\n        onCompositionEnd() {\n          if (!state.validate(inputRef.current.value)) {\n            // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n            // But also update the value in React state as well so it is correct for future updates.\n            let {value, selectionStart, selectionEnd} = compositionStartState.current;\n            inputRef.current.value = value;\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n            state.setInputValue(value);\n          }\n        }\n      }\n    ),\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n"],
  "mappings": "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",
  "names": ["$kOq5K$useRef", "$kOq5K$useEffect"]
}
