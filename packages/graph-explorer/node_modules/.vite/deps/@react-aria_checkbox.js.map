{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@react-stately+toggle@3.4.2_react@17.0.2/node_modules/@react-stately/toggle/dist/packages/@react-stately/toggle/src/index.ts", "../../../../../node_modules/.pnpm/@react-stately+toggle@3.4.2_react@17.0.2/node_modules/@react-stately/toggle/dist/packages/@react-stately/toggle/src/useToggleState.ts", "../../../../../node_modules/.pnpm/@react-aria+checkbox@3.4.1_react@17.0.2/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/index.ts", "../../../../../node_modules/.pnpm/@react-aria+checkbox@3.4.1_react@17.0.2/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckbox.ts", "../../../../../node_modules/.pnpm/@react-aria+checkbox@3.4.1_react@17.0.2/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroup.ts", "../../../../../node_modules/.pnpm/@react-aria+checkbox@3.4.1_react@17.0.2/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/utils.ts", "../../../../../node_modules/.pnpm/@react-aria+checkbox@3.4.1_react@17.0.2/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useToggleState} from './useToggleState';\n\nexport type {ToggleProps} from '@react-types/checkbox';\nexport type {ToggleState} from './useToggleState';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n\n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleProps = {}): ToggleState {\n  let {isReadOnly} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, props.onChange);\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(!isSelected);\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useCheckbox';\nexport * from './useCheckboxGroup';\nexport * from './useCheckboxGroupItem';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {useLabel} from '@react-aria/label';\n\ninterface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: HTMLAttributes<HTMLElement>,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {inputProps};\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;SC6BgB,0CAAe,QAAqB,CAAC,GAAgB;AACnE,MAAI,EAAC,WAAU,IAAI;AAInB,MAAG,CAAE,YAAY,WAAW,IAAI,0CAAmB,MAAM,YAAY,MAAM,mBAAmB,OAAO,MAAM,QAAQ;WAE1G,eAAe,OAAO;AAC7B,QAAE,CAAG;AACH,kBAAY,KAAK;EAErB;WAES,cAAc;AACrB,QAAE,CAAG;AACH,kBAAW,CAAE,UAAU;EAE3B;AAEA,SAAO;;IAEL,aAAa;IACb,QAAQ;EACV;AACF;;;;;;;;SEvBgB,0CAAY,OAA0B,OAAoB,UAAqD;AAC7H,MAAI,EAAC,WAAU,IAAI,0CAAU,OAAO,OAAO,QAAQ;AACnD,MAAI,EAAC,WAAU,IAAI;AAEnB,MAAI,EAAC,gBAAe,IAAI;AACxB,mBAAAA,WAAS,MAAO;AAGd,QAAI,SAAS;AACX,eAAS,QAAQ,gBAAgB;EAErC,CAAC;AAED,SAAO;IACL,YAAY;SACP;MACH,SAAS;MACT,gBAAgB,kBAAkB,UAAU;IAC9C;EACF;AACF;;;AEpCO,IAAM,4CAAqB,oBAAI,QAAO;SDkB7B,0CAAiB,OAA+B,OAA8C;AAC5G,MAAI,EAAC,YAAU,KAAM,IAAI;AAEzB,MAAI,EAAC,YAAU,WAAY,IAAI,0CAAS;OACnC;IAGH,kBAAkB;EACpB,CAAC;AAED,MAAI,WAAW,0CAAe,OAAO;IAAC,WAAW;EAAI,CAAC;AAGtD,4CAAmB,IAAI,OAAO,IAAI;AAElC,SAAO;IACL,YAAY,0CAAW,UAAU;MAC/B,MAAM;MACN,iBAAiB,cAAc;SAC5B;IACL,CAAC;;EAEH;AACF;;;SE7BgB,0CAAqB,OAAmC,OAA2B,UAAqD;AACtJ,QAAM,cAAc,0CAAe;IACjC,YAAY,MAAM,cAAc,MAAM;IACtC,YAAY,MAAM,WAAW,MAAM,KAAK;IACxC,SAAS,YAAY;AACnB,UAAI;AACF,cAAM,SAAS,MAAM,KAAK;;AAE1B,cAAM,YAAY,MAAM,KAAK;AAG/B,UAAI,MAAM;AACR,cAAM,SAAS,UAAU;IAE7B;EACF,CAAC;AAED,MAAI,EAAC,WAAU,IAAI,0CAAY;OAC1B;IACH,YAAY,MAAM,cAAc,MAAM;IACtC,YAAY,MAAM,cAAc,MAAM;IACtC,MAAM,MAAM,QAAQ,0CAAmB,IAAI,KAAK;EAClD,GAAG,aAAa,QAAQ;AAExB,SAAO;;EAAW;AACpB;",
  "names": ["$cKEhs$useEffect"]
}
