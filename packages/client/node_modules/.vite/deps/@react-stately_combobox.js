import {
  $a02d57049d202695$export$d085fb9e920b5ca7,
  $a0d645289fe9b86b$export$e7f05e985daf4b5f
} from "./chunk-QGPQLZLF.js";
import {
  $fc909762b330b746$export$61c6a8c84e605fb6
} from "./chunk-UZQ7T5IR.js";
import "./chunk-HK4WVYDY.js";
import {
  $458b0a5536c1a7cf$export$40bfa8c7b0832715
} from "./chunk-ZQ4MNDX5.js";
import {
  require_react
} from "./chunk-57SFASAQ.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// ../../node_modules/.pnpm/@react-stately+combobox@3.2.2_react@17.0.2/node_modules/@react-stately/combobox/dist/module.js
var import_react2 = __toESM(require_react());

// ../../node_modules/.pnpm/@react-stately+menu@3.4.2_react@17.0.2/node_modules/@react-stately/menu/dist/module.js
var import_react = __toESM(require_react());
function $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {
  let overlayTriggerState = $fc909762b330b746$export$61c6a8c84e605fb6(props);
  let [focusStrategy1, setFocusStrategy] = (0, import_react.useState)(null);
  return {
    focusStrategy: focusStrategy1,
    ...overlayTriggerState,
    open(focusStrategy = null) {
      setFocusStrategy(focusStrategy);
      overlayTriggerState.open();
    },
    toggle(focusStrategy = null) {
      setFocusStrategy(focusStrategy);
      overlayTriggerState.toggle();
    }
  };
}

// ../../node_modules/.pnpm/@react-stately+combobox@3.2.2_react@17.0.2/node_modules/@react-stately/combobox/dist/module.js
function $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e(props) {
  var ref4;
  let { defaultFilter, menuTrigger = "input", allowsEmptyCollection = false, allowsCustomValue, shouldCloseOnBlur = true } = props;
  let [showAllItems, setShowAllItems] = (0, import_react2.useState)(false);
  let [isFocused1, setFocusedState] = (0, import_react2.useState)(false);
  var _defaultInputValue;
  let [inputValue, setInputValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.inputValue, (_defaultInputValue = props.defaultInputValue) !== null && _defaultInputValue !== void 0 ? _defaultInputValue : "", props.onInputChange);
  let onSelectionChange = (key) => {
    if (props.onSelectionChange)
      props.onSelectionChange(key);
    if (key === selectedKey) {
      resetInputValue();
      triggerState.close();
    }
  };
  var _items;
  let { collection, selectionManager, selectedKey, setSelectedKey, selectedItem, disabledKeys } = $a0d645289fe9b86b$export$e7f05e985daf4b5f({
    ...props,
    onSelectionChange,
    items: (_items = props.items) !== null && _items !== void 0 ? _items : props.defaultItems
  });
  let originalCollection = collection;
  let filteredCollection = (0, import_react2.useMemo)(
    () => props.items != null || !defaultFilter ? collection : $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, defaultFilter),
    [
      collection,
      inputValue,
      defaultFilter,
      props.items
    ]
  );
  let menuOpenTrigger = (0, import_react2.useRef)("focus");
  let onOpenChange = (open) => {
    if (props.onOpenChange)
      props.onOpenChange(open, open ? menuOpenTrigger.current : void 0);
  };
  let triggerState = $a28c903ee9ad8dc5$export$79fefeb1c2091ac3({
    ...props,
    onOpenChange,
    isOpen: void 0,
    defaultOpen: void 0
  });
  let open1 = (focusStrategy, trigger) => {
    let displayAllItems = trigger === "manual" || trigger === "focus" && menuTrigger === "focus";
    if (allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) {
      if (displayAllItems && !triggerState.isOpen && props.items === void 0)
        setShowAllItems(true);
      menuOpenTrigger.current = trigger;
      triggerState.open(focusStrategy);
    }
  };
  let toggle = (focusStrategy, trigger) => {
    let displayAllItems = trigger === "manual" || trigger === "focus" && menuTrigger === "focus";
    if (!(allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) && !triggerState.isOpen)
      return;
    if (displayAllItems && !triggerState.isOpen && props.items === void 0)
      setShowAllItems(true);
    if (!triggerState.isOpen)
      menuOpenTrigger.current = trigger;
    triggerState.toggle(focusStrategy);
  };
  let lastValue = (0, import_react2.useRef)(inputValue);
  let resetInputValue = () => {
    var ref;
    var ref3;
    let itemText = (ref3 = (ref = collection.getItem(selectedKey)) === null || ref === void 0 ? void 0 : ref.textValue) !== null && ref3 !== void 0 ? ref3 : "";
    lastValue.current = itemText;
    setInputValue(itemText);
  };
  let isInitialRender = (0, import_react2.useRef)(true);
  var _selectedKey, ref1;
  let lastSelectedKey = (0, import_react2.useRef)((ref1 = (_selectedKey = props.selectedKey) !== null && _selectedKey !== void 0 ? _selectedKey : props.defaultSelectedKey) !== null && ref1 !== void 0 ? ref1 : null);
  var ref2;
  let lastSelectedKeyText = (0, import_react2.useRef)((ref2 = (ref4 = collection.getItem(selectedKey)) === null || ref4 === void 0 ? void 0 : ref4.textValue) !== null && ref2 !== void 0 ? ref2 : "");
  (0, import_react2.useEffect)(() => {
    var ref;
    if (isFocused1 && (filteredCollection.size > 0 || allowsEmptyCollection) && !triggerState.isOpen && inputValue !== lastValue.current && menuTrigger !== "manual")
      open1(null, "input");
    if (!showAllItems && !allowsEmptyCollection && triggerState.isOpen && filteredCollection.size === 0)
      triggerState.close();
    if (selectedKey != null && selectedKey !== lastSelectedKey.current)
      triggerState.close();
    if (inputValue !== lastValue.current) {
      selectionManager.setFocusedKey(null);
      setShowAllItems(false);
      if (inputValue === "" && (props.inputValue === void 0 || props.selectedKey === void 0))
        setSelectedKey(null);
    }
    if (isInitialRender.current && props.inputValue === void 0 && props.defaultInputValue === void 0)
      resetInputValue();
    if (selectedKey !== lastSelectedKey.current && (props.inputValue === void 0 || props.selectedKey === void 0))
      resetInputValue();
    else
      lastValue.current = inputValue;
    var ref5;
    let selectedItemText = (ref5 = (ref = collection.getItem(selectedKey)) === null || ref === void 0 ? void 0 : ref.textValue) !== null && ref5 !== void 0 ? ref5 : "";
    if (!isFocused1 && selectedKey != null && props.inputValue === void 0 && selectedKey === lastSelectedKey.current) {
      if (lastSelectedKeyText.current !== selectedItemText) {
        lastValue.current = selectedItemText;
        setInputValue(selectedItemText);
      }
    }
    isInitialRender.current = false;
    lastSelectedKey.current = selectedKey;
    lastSelectedKeyText.current = selectedItemText;
  });
  (0, import_react2.useEffect)(() => {
    if (!triggerState.isOpen)
      selectionManager.setFocusedKey(null);
  }, [
    triggerState.isOpen,
    selectionManager
  ]);
  let revert = () => {
    if (allowsCustomValue && selectedKey == null)
      commitCustomValue();
    else
      commitSelection();
  };
  let commitCustomValue = () => {
    lastSelectedKey.current = null;
    setSelectedKey(null);
    triggerState.close();
  };
  let commitSelection = () => {
    if (props.selectedKey !== void 0 && props.inputValue !== void 0) {
      var ref;
      props.onSelectionChange(selectedKey);
      var ref6;
      let itemText = (ref6 = (ref = collection.getItem(selectedKey)) === null || ref === void 0 ? void 0 : ref.textValue) !== null && ref6 !== void 0 ? ref6 : "";
      lastValue.current = itemText;
      triggerState.close();
    } else {
      resetInputValue();
      triggerState.close();
    }
  };
  let commit = () => {
    if (triggerState.isOpen && selectionManager.focusedKey != null) {
      if (selectedKey === selectionManager.focusedKey)
        commitSelection();
      else
        setSelectedKey(selectionManager.focusedKey);
    } else if (allowsCustomValue)
      commitCustomValue();
    else
      commitSelection();
  };
  let setFocused = (isFocused) => {
    if (isFocused) {
      if (menuTrigger === "focus")
        open1(null, "focus");
    } else if (shouldCloseOnBlur) {
      var ref;
      var ref7;
      let itemText = (ref7 = (ref = collection.getItem(selectedKey)) === null || ref === void 0 ? void 0 : ref.textValue) !== null && ref7 !== void 0 ? ref7 : "";
      if (allowsCustomValue && inputValue !== itemText)
        commitCustomValue();
      else
        commitSelection();
    }
    setFocusedState(isFocused);
  };
  return {
    ...triggerState,
    toggle,
    open: open1,
    selectionManager,
    selectedKey,
    setSelectedKey,
    disabledKeys,
    isFocused: isFocused1,
    setFocused,
    selectedItem,
    collection: showAllItems ? originalCollection : filteredCollection,
    inputValue,
    setInputValue,
    commit,
    revert
  };
}
function $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, filter) {
  return new $a02d57049d202695$export$d085fb9e920b5ca7($a9e7382a7d111cb5$var$filterNodes(collection, inputValue, filter));
}
function $a9e7382a7d111cb5$var$filterNodes(nodes, inputValue, filter) {
  let filteredNode = [];
  for (let node of nodes) {
    if (node.type === "section" && node.hasChildNodes) {
      let filtered = $a9e7382a7d111cb5$var$filterNodes(node.childNodes, inputValue, filter);
      if ([
        ...filtered
      ].length > 0)
        filteredNode.push({
          ...node,
          childNodes: filtered
        });
    } else if (node.type !== "section" && filter(node.textValue, inputValue))
      filteredNode.push({
        ...node
      });
  }
  return filteredNode;
}
export {
  $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e as useComboBoxState
};
//# sourceMappingURL=@react-stately_combobox.js.map
