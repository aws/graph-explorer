{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@react-aria+dialog@3.4.0_sfoxds7t5ydpegc3knd667wn6m/node_modules/@react-aria/dialog/dist/packages/@react-aria/dialog/src/index.ts", "../../../../../node_modules/.pnpm/@react-aria+dialog@3.4.0_sfoxds7t5ydpegc3knd667wn6m/node_modules/@react-aria/dialog/dist/packages/@react-aria/dialog/src/useDialog.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {useDialog} from './useDialog';\nexport type {AriaDialogProps} from '@react-types/dialog';\nexport type {DialogAria} from './useDialog';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {filterDOMProps, useSlotId} from '@react-aria/utils';\nimport {focusSafely} from '@react-aria/focus';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {useOverlayFocusContain} from '@react-aria/overlays';\n\nexport interface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: DOMAttributes,\n\n  /** Props for the dialog title element. */\n  titleProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<FocusableElement>): DialogAria {\n  let {role = 'dialog'} = props;\n  let titleId = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  let isRefocusing = useRef(false);\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          isRefocusing.current = true;\n          ref.current.blur();\n          focusSafely(ref.current);\n          isRefocusing.current = false;\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  useOverlayFocusContain();\n\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId,\n      // Prevent blur events from reaching useOverlay, which may cause\n      // popovers to close. Since focus is contained within the dialog,\n      // we don't want this to occur due to the above useEffect.\n      onBlur: e => {\n        if (isRefocusing.current) {\n          e.stopPropagation();\n        }\n      }\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;SC+BgB,0CAAU,OAAwB,KAA8C;AAC9F,MAAI,EAAC,OAAO,SAAQ,IAAI;AACxB,MAAI,UAAU,0CAAS;AACvB,YAAU,MAAM,gBAAgB,SAAY;AAE5C,MAAI,mBAAe,aAAAA,QAAO,KAAK;AAG/B,mBAAAC,WAAS,MAAO;AACd,QAAI,IAAI,WAAO,CAAK,IAAI,QAAQ,SAAS,SAAS,aAAa,GAAG;AAChE,gDAAY,IAAI,OAAO;AAKvB,UAAI,UAAU,WAAU,MAAO;AAC7B,YAAI,SAAS,kBAAkB,IAAI,SAAS;AAC1C,uBAAa,UAAU;AACvB,cAAI,QAAQ,KAAI;AAChB,oDAAY,IAAI,OAAO;AACvB,uBAAa,UAAU;QACzB;MACF,GAAG,GAAG;AAEN,aAAM,MAAO;AACX,qBAAa,OAAO;MACtB;IACF;EACF,GAAG;IAAC;EAAG,CAAC;AAER,4CAAsB;AAOtB,SAAO;IACL,aAAa;SACR,0CAAe,OAAO;QAAC,WAAW;MAAI,CAAC;;MAE1C,UAAU;MACV,mBAAmB,MAAM,sBAAsB;MAI/C,QAAM,CAAE,MAAK;AACX,YAAI,aAAa;AACf,YAAE,gBAAe;MAErB;IACF;IACA,YAAY;MACV,IAAI;IACN;EACF;AACF;",
  "names": ["$m1DSs$useRef", "$m1DSs$useEffect"]
}
