{"mappings":"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","sources":["packages/@internationalized/message/src/index.ts","packages/@internationalized/message/src/MessageDictionary.ts","packages/@internationalized/message/src/MessageFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {LocalizedStrings} from './MessageDictionary';\nexport {MessageDictionary} from './MessageDictionary';\nexport {MessageFormatter} from './MessageFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"],"names":[],"version":3,"file":"module.js.map"}