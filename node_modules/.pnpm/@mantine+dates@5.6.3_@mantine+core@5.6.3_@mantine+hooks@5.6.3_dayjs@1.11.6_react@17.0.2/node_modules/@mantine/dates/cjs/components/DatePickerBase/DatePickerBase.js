'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@mantine/core');
var hooks = require('@mantine/hooks');
var DatePickerBase_styles = require('./DatePickerBase.styles.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const RIGHT_SECTION_WIDTH = {
  xs: 24,
  sm: 30,
  md: 34,
  lg: 40,
  xl: 44
};
const defaultTransition = {
  in: { opacity: 1, transform: "translateY(0) scale(1)" },
  out: { opacity: 0, transform: "translateY(-25px) scale(0.93)" },
  common: { transformOrigin: "top left" },
  transitionProperty: "opacity, transform"
};
const DatePickerBase = React.forwardRef((_a, ref) => {
  var _b = _a, {
    classNames,
    className,
    style,
    styles,
    wrapperProps,
    required,
    allowFreeInput = false,
    label,
    error,
    id,
    description,
    placeholder,
    shadow,
    transition = defaultTransition,
    transitionDuration = 100,
    transitionTimingFunction,
    size = "sm",
    children,
    inputLabel,
    __staticSelector = "DatePickerBase",
    dropdownOpened,
    setDropdownOpened,
    dropdownType = "popover",
    dropdownPosition = "flip",
    clearable = true,
    clearButtonLabel,
    onClear,
    positionDependencies = [],
    zIndex,
    withinPortal = false,
    onBlur,
    onFocus,
    onChange,
    onKeyDown,
    name = "date",
    sx,
    amountOfMonths = 1,
    onDropdownClose,
    onDropdownOpen,
    clickOutsideEvents = ["mousedown", "touchstart"],
    modalZIndex,
    errorProps,
    labelProps,
    descriptionProps,
    clearButtonTabIndex = 0,
    unstyled,
    inputContainer,
    inputWrapperOrder,
    modalProps,
    withAsterisk
  } = _b, others = __objRest(_b, [
    "classNames",
    "className",
    "style",
    "styles",
    "wrapperProps",
    "required",
    "allowFreeInput",
    "label",
    "error",
    "id",
    "description",
    "placeholder",
    "shadow",
    "transition",
    "transitionDuration",
    "transitionTimingFunction",
    "size",
    "children",
    "inputLabel",
    "__staticSelector",
    "dropdownOpened",
    "setDropdownOpened",
    "dropdownType",
    "dropdownPosition",
    "clearable",
    "clearButtonLabel",
    "onClear",
    "positionDependencies",
    "zIndex",
    "withinPortal",
    "onBlur",
    "onFocus",
    "onChange",
    "onKeyDown",
    "name",
    "sx",
    "amountOfMonths",
    "onDropdownClose",
    "onDropdownOpen",
    "clickOutsideEvents",
    "modalZIndex",
    "errorProps",
    "labelProps",
    "descriptionProps",
    "clearButtonTabIndex",
    "unstyled",
    "inputContainer",
    "inputWrapperOrder",
    "modalProps",
    "withAsterisk"
  ]);
  const { classes, cx, theme } = DatePickerBase_styles['default'](null, {
    classNames,
    styles,
    unstyled,
    name: __staticSelector
  });
  const { systemStyles, rest } = core.extractSystemStyles(others);
  const uuid = hooks.useId(id);
  const inputRef = React.useRef();
  const closeDropdown = () => {
    setDropdownOpened(false);
    onDropdownClose == null ? void 0 : onDropdownClose();
  };
  const openDropdown = () => {
    setDropdownOpened(true);
    onDropdownOpen == null ? void 0 : onDropdownOpen();
  };
  const toggleDropdown = () => {
    setDropdownOpened(!dropdownOpened);
    !dropdownOpened ? onDropdownOpen == null ? void 0 : onDropdownOpen() : onDropdownClose == null ? void 0 : onDropdownClose();
  };
  const closeOnEscape = (event) => {
    if (event.key === "Escape") {
      closeDropdown();
      window.setTimeout(() => {
        var _a2;
        return (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
      }, 0);
    }
  };
  const rightSection = clearable ? /* @__PURE__ */ React__default.createElement(core.CloseButton, {
    variant: "transparent",
    "aria-label": clearButtonLabel,
    onClick: onClear,
    size,
    tabIndex: clearButtonTabIndex,
    unstyled
  }) : null;
  const handleInputBlur = (event) => {
    typeof onBlur === "function" && onBlur(event);
    if (allowFreeInput) {
      closeDropdown();
    }
  };
  const handleInputFocus = (event) => {
    typeof onFocus === "function" && onFocus(event);
    if (allowFreeInput) {
      openDropdown();
    }
  };
  const handleKeyDown = (event) => {
    typeof onKeyDown === "function" && onKeyDown(event);
    if ((event.key === "Space" || event.key === "Enter") && !allowFreeInput) {
      event.preventDefault();
      openDropdown();
    }
  };
  return /* @__PURE__ */ React__default.createElement(core.Input.Wrapper, __spreadValues(__spreadValues({
    required,
    id: uuid,
    label,
    error,
    description,
    className,
    style,
    classNames,
    styles,
    size,
    __staticSelector,
    sx,
    errorProps,
    descriptionProps,
    labelProps,
    inputContainer,
    inputWrapperOrder,
    unstyled,
    withAsterisk
  }, systemStyles), wrapperProps), /* @__PURE__ */ React__default.createElement(core.Popover, {
    __staticSelector,
    withinPortal,
    offset: 10,
    opened: dropdownOpened,
    transitionDuration,
    transition,
    positionDependencies,
    middlewares: { flip: dropdownPosition === "flip", shift: false },
    position: dropdownPosition === "flip" ? "bottom-start" : dropdownPosition,
    shadow,
    onClose: closeDropdown,
    trapFocus: !allowFreeInput,
    withRoles: false,
    clickOutsideEvents,
    zIndex,
    classNames,
    styles,
    unstyled
  }, /* @__PURE__ */ React__default.createElement(core.Popover.Target, null, /* @__PURE__ */ React__default.createElement("div", {
    className: classes.wrapper
  }, /* @__PURE__ */ React__default.createElement(core.Input, __spreadValues({
    classNames: __spreadProps(__spreadValues({}, classNames), {
      input: cx(classes.input, classNames == null ? void 0 : classNames.input)
    }),
    "data-free-input": allowFreeInput || void 0,
    styles,
    onClick: () => !allowFreeInput ? toggleDropdown() : openDropdown(),
    onKeyDown: handleKeyDown,
    id: uuid,
    ref: hooks.useMergedRef(ref, inputRef),
    __staticSelector,
    size,
    name,
    placeholder,
    value: inputLabel,
    required,
    invalid: !!error,
    readOnly: !allowFreeInput,
    rightSection,
    rightSectionWidth: theme.fn.size({ size, sizes: RIGHT_SECTION_WIDTH }),
    onBlur: handleInputBlur,
    onFocus: handleInputFocus,
    onChange,
    autoComplete: "off",
    unstyled
  }, rest)))), dropdownType === "popover" ? /* @__PURE__ */ React__default.createElement(core.Popover.Dropdown, null, /* @__PURE__ */ React__default.createElement("div", {
    "data-mantine-stop-propagation": dropdownOpened,
    onKeyDownCapture: closeOnEscape,
    "aria-hidden": allowFreeInput || void 0
  }, children)) : /* @__PURE__ */ React__default.createElement(core.Modal, __spreadProps(__spreadValues({}, modalProps), {
    opened: dropdownOpened,
    onClose: closeDropdown,
    withCloseButton: false,
    size: amountOfMonths * 400,
    zIndex: modalZIndex,
    unstyled
  }), children)));
});
DatePickerBase.displayName = "@mantine/dates/DatePickerBase";

exports.DatePickerBase = DatePickerBase;
//# sourceMappingURL=DatePickerBase.js.map
