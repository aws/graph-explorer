var $eFCLV$reactariautils = require("@react-aria/utils");
var $eFCLV$reactariainteractions = require("@react-aria/interactions");
var $eFCLV$reactarialabel = require("@react-aria/label");
var $eFCLV$reactariaselection = require("@react-aria/selection");
var $eFCLV$reactstatelycollections = require("@react-stately/collections");

function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $a3ce5bb3074610af$exports = {};

$parcel$export($a3ce5bb3074610af$exports, "useListBox", () => $a3ce5bb3074610af$export$50eacbbf140a3141);

var $87beb89ab4a308fd$exports = {};

$parcel$export($87beb89ab4a308fd$exports, "listData", () => $87beb89ab4a308fd$export$3585ede4d035bf14);
$parcel$export($87beb89ab4a308fd$exports, "getItemId", () => $87beb89ab4a308fd$export$9145995848b05025);
const $87beb89ab4a308fd$export$3585ede4d035bf14 = new WeakMap();
function $87beb89ab4a308fd$var$normalizeKey(key) {
    if (typeof key === 'string') return key.replace(/\s*/g, '');
    return '' + key;
}
function $87beb89ab4a308fd$export$9145995848b05025(state, itemKey) {
    let data = $87beb89ab4a308fd$export$3585ede4d035bf14.get(state);
    if (!data) throw new Error('Unknown list');
    return `${data.id}-option-${$87beb89ab4a308fd$var$normalizeKey(itemKey)}`;
}






function $a3ce5bb3074610af$export$50eacbbf140a3141(props, state, ref) {
    let domProps = $eFCLV$reactariautils.filterDOMProps(props, {
        labelable: true
    });
    let { listProps: listProps  } = $eFCLV$reactariaselection.useSelectableList({
        ...props,
        ref: ref,
        selectionManager: state.selectionManager,
        collection: state.collection,
        disabledKeys: state.disabledKeys
    });
    let { focusWithinProps: focusWithinProps  } = $eFCLV$reactariainteractions.useFocusWithin({
        onFocusWithin: props.onFocus,
        onBlurWithin: props.onBlur,
        onFocusWithinChange: props.onFocusChange
    });
    // Share list id and some props with child options.
    let id = $eFCLV$reactariautils.useId(props.id);
    $87beb89ab4a308fd$export$3585ede4d035bf14.set(state, {
        id: id,
        shouldUseVirtualFocus: props.shouldUseVirtualFocus,
        shouldSelectOnPressUp: props.shouldSelectOnPressUp,
        shouldFocusOnHover: props.shouldFocusOnHover,
        isVirtualized: props.isVirtualized
    });
    let { labelProps: labelProps , fieldProps: fieldProps  } = $eFCLV$reactarialabel.useLabel({
        ...props,
        id: id,
        // listbox is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span'
    });
    return {
        labelProps: labelProps,
        listBoxProps: $eFCLV$reactariautils.mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {
            'aria-multiselectable': 'true'
        } : {
        }, {
            role: 'listbox',
            ...$eFCLV$reactariautils.mergeProps(fieldProps, listProps)
        })
    };
}


var $c164f9f79f4cef2d$exports = {};

$parcel$export($c164f9f79f4cef2d$exports, "useOption", () => $c164f9f79f4cef2d$export$497855f14858aa34);





function $c164f9f79f4cef2d$export$497855f14858aa34(props, state, ref) {
    let { key: key  } = props;
    let data = $87beb89ab4a308fd$export$3585ede4d035bf14.get(state);
    var _isDisabled;
    let isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);
    var _isSelected;
    let isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);
    let isFocused = state.selectionManager.focusedKey === key;
    var _shouldSelectOnPressUp;
    let shouldSelectOnPressUp = (_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _shouldSelectOnPressUp !== void 0 ? _shouldSelectOnPressUp : data.shouldSelectOnPressUp;
    var _shouldFocusOnHover;
    let shouldFocusOnHover = (_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _shouldFocusOnHover !== void 0 ? _shouldFocusOnHover : data.shouldFocusOnHover;
    var _shouldUseVirtualFocus;
    let shouldUseVirtualFocus = (_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _shouldUseVirtualFocus !== void 0 ? _shouldUseVirtualFocus : data.shouldUseVirtualFocus;
    var _isVirtualized;
    let isVirtualized = (_isVirtualized = props.isVirtualized) !== null && _isVirtualized !== void 0 ? _isVirtualized : data.isVirtualized;
    let labelId = $eFCLV$reactariautils.useSlotId();
    let descriptionId = $eFCLV$reactariautils.useSlotId();
    let optionProps = {
        role: 'option',
        'aria-disabled': isDisabled,
        'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined
    };
    // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply "text".
    // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.
    // https://bugs.webkit.org/show_bug.cgi?id=209279
    if (!($eFCLV$reactariautils.isMac() && $eFCLV$reactariautils.isWebKit())) {
        optionProps['aria-label'] = props['aria-label'];
        optionProps['aria-labelledby'] = labelId;
        optionProps['aria-describedby'] = descriptionId;
    }
    if (isVirtualized) {
        optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;
        optionProps['aria-setsize'] = $eFCLV$reactstatelycollections.getItemCount(state.collection);
    }
    let { itemProps: itemProps , isPressed: isPressed  } = $eFCLV$reactariaselection.useSelectableItem({
        selectionManager: state.selectionManager,
        key: key,
        ref: ref,
        shouldSelectOnPressUp: shouldSelectOnPressUp,
        allowsDifferentPressOrigin: shouldSelectOnPressUp,
        isVirtualized: isVirtualized,
        shouldUseVirtualFocus: shouldUseVirtualFocus,
        isDisabled: isDisabled
    });
    let { hoverProps: hoverProps  } = $eFCLV$reactariainteractions.useHover({
        isDisabled: isDisabled || !shouldFocusOnHover,
        onHoverStart () {
            if (!$eFCLV$reactariainteractions.isFocusVisible()) {
                state.selectionManager.setFocused(true);
                state.selectionManager.setFocusedKey(key);
            }
        }
    });
    return {
        optionProps: {
            ...optionProps,
            ...$eFCLV$reactariautils.mergeProps(itemProps, hoverProps),
            id: $87beb89ab4a308fd$export$9145995848b05025(state, key)
        },
        labelProps: {
            id: labelId
        },
        descriptionProps: {
            id: descriptionId
        },
        isFocused: isFocused,
        isSelected: isSelected,
        isDisabled: isDisabled,
        isPressed: isPressed
    };
}


var $f32afd5f225c3320$exports = {};

$parcel$export($f32afd5f225c3320$exports, "useListBoxSection", () => $f32afd5f225c3320$export$c3f9f39876e4bc7);

function $f32afd5f225c3320$export$c3f9f39876e4bc7(props) {
    let { heading: heading , 'aria-label': ariaLabel  } = props;
    let headingId = $eFCLV$reactariautils.useId();
    return {
        itemProps: {
            role: 'presentation'
        },
        headingProps: heading ? {
            // Techincally, listbox cannot contain headings according to ARIA.
            // We hide the heading from assistive technology, and only use it
            // as a label for the nested group.
            id: headingId,
            'aria-hidden': true
        } : {
        },
        groupProps: {
            role: 'group',
            'aria-label': ariaLabel,
            'aria-labelledby': heading ? headingId : undefined
        }
    };
}



$parcel$exportWildcard(module.exports, $a3ce5bb3074610af$exports);
$parcel$exportWildcard(module.exports, $c164f9f79f4cef2d$exports);
$parcel$exportWildcard(module.exports, $f32afd5f225c3320$exports);
$parcel$exportWildcard(module.exports, $87beb89ab4a308fd$exports);


//# sourceMappingURL=main.js.map
