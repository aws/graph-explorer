{"mappings":";;;;;;;;SCiDgB,yCAAqB,CAAC,KAAyB,GAAG,CAAC;AAAA,CAAC,EAAsB,CAAC;IACzF,GAAG,EAAE,cAAc,EAAE,QAAQ,IAAI,2CAAkB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,YAAY,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ;IAEzG,KAAK,CAAC,KAAK,GAAuB,CAAC;QACjC,KAAK,EAAE,cAAc;QACrB,QAAQ,EAAC,KAAK,EAAE,CAAC;YACf,EAAE,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,EACtC,MAAM;YAGR,QAAQ,CAAC,KAAK;QAChB,CAAC;QACD,UAAU,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK;QACrC,UAAU,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK;QACrC,UAAU,EAAC,KAAK,EAAE,CAAC;YACjB,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK;QACtC,CAAC;QACD,QAAQ,EAAC,KAAK,EAAE,CAAC;YACf,EAAE,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,EACtC,MAAM;YAER,EAAE,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,GAChC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK;QAExC,CAAC;QACD,WAAW,EAAC,KAAK,EAAE,CAAC;YAClB,EAAE,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,EACtC,MAAM;YAER,EAAE,EAAE,cAAc,CAAC,QAAQ,CAAC,KAAK,GAC/B,QAAQ,CAAC,cAAc,CAAC,MAAM,EAAC,aAAa,GAAI,aAAa,KAAK,KAAK;;QAE3E,CAAC;QACD,WAAW,EAAC,KAAK,EAAE,CAAC;YAClB,EAAE,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,EACtC,MAAM;YAER,EAAE,EAAE,cAAc,CAAC,QAAQ,CAAC,KAAK,GAC/B,QAAQ,CAAC,cAAc,CAAC,MAAM,EAAC,aAAa,GAAI,aAAa,KAAK,KAAK;;iBAEvE,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK;QAExC,CAAC;QACD,eAAe,EAAE,KAAK,CAAC,eAAe;IACxC,CAAC;IAED,MAAM,CAAC,KAAK;AACd,CAAC","sources":["packages/@react-stately/checkbox/src/index.ts","packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useCheckboxGroupState} from './useCheckboxGroupState';\n\nexport type {CheckboxGroupProps} from '@react-types/checkbox';\nexport type {CheckboxGroupState} from './useCheckboxGroupState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void,\n\n  /** The current validation state of the checkbox group. */\n  validationState: ValidationState\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    validationState: props.validationState\n  };\n\n  return state;\n}\n"],"names":[],"version":3,"file":"main.js.map"}