{"mappings":"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","sources":["packages/@react-stately/selection/src/index.ts","packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {MultipleSelectionStateProps} from './useMultipleSelectionState';\nexport type {FocusState, SingleSelectionState, MultipleSelectionState, MultipleSelectionManager} from './types';\nexport {useMultipleSelectionState} from './useMultipleSelectionState';\nexport {SelectionManager} from './SelectionManager';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"],"names":[],"version":3,"file":"module.js.map"}