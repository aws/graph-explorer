{"mappings":"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","sources":["packages/@react-aria/selection/src/index.ts","packages/@react-aria/selection/src/useSelectableCollection.ts","packages/@react-aria/selection/src/utils.ts","packages/@react-aria/selection/src/useTypeSelect.ts","packages/@react-aria/selection/src/useSelectableItem.ts","packages/@react-aria/selection/src/useSelectableList.ts","packages/@react-aria/selection/src/ListKeyboardDelegate.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useSelectableCollection} from './useSelectableCollection';\nexport {useSelectableItem} from './useSelectableItem';\nexport {useSelectableList} from './useSelectableList';\nexport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nexport {useTypeSelect} from './useTypeSelect';\n\nexport type {AriaSelectableCollectionOptions, SelectableCollectionAria} from './useSelectableCollection';\nexport type {AriaSelectableListOptions, SelectableListAria} from './useSelectableList';\nexport type {SelectableItemOptions, SelectableItemStates, SelectableItemAria} from './useSelectableItem';\nexport type {AriaTypeSelectOptions, TypeSelectAria} from './useTypeSelect';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {FocusEvent, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, useEvent} from '@react-aria/utils';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (e.currentTarget.contains(e.target)) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {Key, KeyboardEvent, useRef} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\n\nexport interface AriaTypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\nexport interface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: DOMAttributes\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: AriaTypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, LongPressEvent, PressEvent} from '@react-types/shared';\nimport {focusSafely} from '@react-aria/focus';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {Key, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\nexport interface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<FocusableElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\nexport interface SelectableItemStates {\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the item may be selected, dependent on `selectionMode`, `disabledKeys`, and `disabledBehavior`.\n   */\n  allowsSelection: boolean,\n  /**\n   * Whether the item has an action, dependent on `onAction`, `disabledKeys`,\n   * and `disabledBehavior`. It may also change depending on the current selection state\n   * of the list (e.g. when selection is primary). This can be used to enable or disable hover\n   * styles or other visual indications of interactivity.\n   */\n  hasAction: boolean\n}\n\nexport interface SelectableItemAria extends SelectableItemStates {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: DOMAttributes\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus) {\n    itemProps = {\n      tabIndex: key === manager.focusedKey ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  }\n\n\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  isDisabled = isDisabled || manager.isDisabled(key);\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n  let allowsActions = onAction && !isDisabled;\n  let hasPrimaryAction = allowsActions && (\n    manager.selectionBehavior === 'replace'\n      ? !allowsSelection\n      : manager.isEmpty\n  );\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = useRef(null);\n\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = useRef(false);\n  let hadPrimaryActionOnPressStart = useRef(false);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || isSelectionKey())) {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (hasPrimaryAction || (hasSecondaryAction && e.pointerType !== 'mouse')) {\n          if (e.pointerType === 'keyboard' && !isActionKey()) {\n            return;\n          }\n\n          onAction();\n        } else if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = (e) => {\n        if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (\n        (e.pointerType === 'mouse' && !hasPrimaryAction) ||\n        (e.pointerType === 'keyboard' && (!onAction || isSelectionKey()))\n      ) {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (\n        e.pointerType === 'touch' ||\n        e.pointerType === 'pen' ||\n        e.pointerType === 'virtual' ||\n        (e.pointerType === 'keyboard' && hasAction && isActionKey()) ||\n        (e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current)\n      ) {\n        if (hasAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {longPressProps} = useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) {\n      e.preventDefault();\n    }\n  };\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      longPressEnabled ? longPressProps : {},\n      {onDoubleClick, onDragStartCapture}\n    ),\n    isPressed,\n    isSelected: manager.isSelected(key),\n    isDisabled,\n    allowsSelection,\n    hasAction\n  };\n}\n\nfunction isActionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === 'Enter';\n}\n\nfunction isSelectionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === ' ' || event?.code === 'Space';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, DOMAttributes, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\nexport interface AriaSelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\nexport interface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: DOMAttributes\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: AriaSelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = selectionManager.selectionBehavior === 'replace',\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = useMemo(() => (\n    keyboardDelegate || new ListKeyboardDelegate(collection, disabledBehavior === 'selection' ? new Set() : disabledKeys, ref, collator)\n  ), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n"],"names":[],"version":3,"file":"main.js.map"}