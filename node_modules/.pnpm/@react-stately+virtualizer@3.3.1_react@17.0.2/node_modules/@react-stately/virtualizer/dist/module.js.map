{"mappings":"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","sources":["packages/@react-stately/virtualizer/src/index.ts","packages/@react-stately/virtualizer/src/Layout.ts","packages/@react-stately/virtualizer/src/LayoutInfo.ts","packages/@react-stately/virtualizer/src/Point.ts","packages/@react-stately/virtualizer/src/Rect.ts","packages/@react-stately/virtualizer/src/Size.ts","packages/@react-stately/virtualizer/src/ReusableView.ts","packages/@react-stately/virtualizer/src/useVirtualizerState.ts","packages/@react-stately/virtualizer/src/Virtualizer.ts","packages/@react-stately/virtualizer/src/tween.ts","packages/@react-stately/virtualizer/src/utils.ts","packages/@react-stately/virtualizer/src/OverscanManager.ts","packages/@react-stately/virtualizer/src/Transaction.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {InvalidationContext} from './types';\nexport type {VirtualizerState} from './useVirtualizerState';\nexport type {RectCorner} from './Rect';\n\nexport {Layout} from './Layout';\nexport {LayoutInfo} from './LayoutInfo';\nexport {Point} from './Point';\nexport {Rect} from './Rect';\nexport {Size} from './Size';\nexport {ReusableView} from './ReusableView';\nexport {useVirtualizerState} from './useVirtualizerState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * Whether the layout info allows its contents to overflow its container.\n   * @default false\n   */\n  allowOverflow: boolean;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  }, []);\n\n  return {\n    virtualizer,\n    visibleViews,\n    setVisibleRect: useCallback((rect) => {\n      virtualizer.visibleRect = rect;\n    }, [virtualizer]),\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling: useCallback(() => {\n      virtualizer.startScrolling();\n      setScrolling(true);\n    }, [virtualizer]),\n    endScrolling: useCallback(() => {\n      virtualizer.endScrolling();\n      setScrolling(false);\n    }, [virtualizer])\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection} from '@react-types/shared';\nimport {concatIterators, difference, isSetEqual} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Key} from 'react';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _persistedKeys: Set<Key>;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n    this._persistedKeys = new Set();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys(): Set<Key> {\n    return this._persistedKeys;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys: Set<Key>) {\n    if (!isSetEqual(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key: Key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) {\n      return true;\n    }\n\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) {\n      while (k != null) {\n        let layoutInfo = this.layout.getLayoutInfo(k);\n        if (!layoutInfo) {\n          break;\n        }\n\n        k = layoutInfo.parentKey;\n\n        if (k === key) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) {\n        return layoutInfo.key;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n    this._relayoutRaf = requestAnimationFrame(() => {\n      this._relayoutRaf = null;\n      this.relayoutNow();\n    });\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (!viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo.parentKey).push(view);\n      if (!viewsByParentKey.has(view.layoutInfo.key)) {\n        viewsByParentKey.set(view.layoutInfo.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    // key can be 0, so check if null or undefined\n    if (key == null) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    this._processTransactionQueue();\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n      // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n      // added, removed... etc in a loop.\n      if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\n/** Returns whether two sets are equal. */\nexport function isSetEqual<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (let key of a) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n"],"names":[],"version":3,"file":"module.js.map"}