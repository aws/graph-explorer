{"mappings":"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","sources":["packages/@react-aria/button/src/index.ts","packages/@react-aria/button/src/useButton.ts","packages/@react-aria/button/src/useToggleButton.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useButton';\nexport * from './useToggleButton';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n// Order with overrides is important: 'button' should be default\nexport function useButton(props: AriaButtonProps<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonProps<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonProps<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonProps<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonProps<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<HTMLElement>): ButtonAria<HTMLAttributes<HTMLElement>>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {ToggleState} from '@react-stately/toggle';\n\nexport function useToggleButton(props: AriaToggleButtonProps<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<HTMLElement>): ButtonAria<HTMLAttributes<HTMLElement>>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}