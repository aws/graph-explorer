{"version":3,"file":"react-table.production.min.js","sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js","../src/plugin-hooks/useGridLayout.js"],"sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { rowsById } = instance\n\n    const isAllRowsExpanded =\n      Object.keys(rowsById).length === Object.keys(state.expanded).length\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    aggregations[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows.map((row) => ({ ...row, depth }))\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (row) {\n        if (!row.isGrouped) {\n          if (shouldExist) {\n            newSelectedRowIds[id] = true\n          } else {\n            delete newSelectedRowIds[id]\n          }\n        }\n\n        if (selectSubRows && getSubRows(row)) {\n          return getSubRows(row).forEach(row => handleRowById(row.id))\n        }\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    let raf\n    let mostRecentClientX\n\n    const dispatchEnd = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnDoneResizing })\n    }\n    const dispatchMove = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnResizing, clientX: mostRecentClientX })\n    }\n\n    const scheduleDispatchMoveOnNextAnimationFrame = clientXPos => {\n      mostRecentClientX = clientXPos\n      if (!raf) {\n        raf = window.requestAnimationFrame(dispatchMove)\n      }\n    }\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => scheduleDispatchMoveOnNextAnimationFrame(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n","import { actions } from '../publicUtils'\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getRowProps.push(getRowProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => {\n  const gridTemplateColumns = instance.visibleColumns.map(column => {\n    if (instance.state.gridLayout.columnWidths[column.id])\n      return `${instance.state.gridLayout.columnWidths[column.id]}px`\n    // When resizing, lock the width of all unset columns\n    // instead of using user-provided width or defaultColumn width,\n    // which could potentially be 'auto' or 'fr' units that don't scale linearly\n    if (instance.state.columnResizing?.isResizingColumn)\n      return `${instance.state.gridLayout.startWidths[column.id]}px`\n    if (typeof column.width === 'number') return `${column.width}px`\n    return column.width\n  })\n  return [\n    props,\n    {\n      style: {\n        display: `grid`,\n        gridTemplateColumns: gridTemplateColumns.join(` `),\n      },\n    },\n  ]\n}\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky`, //enables a scroll wrapper to be placed around the table and have sticky headers\n      gridColumn: `span ${column.totalVisibleHeaderCount}`,\n    },\n  },\n]\n\nconst getRowProps = (props, { row }) => {\n  if (row.isExpanded) {\n    return [\n      props,\n      {\n        style: {\n          gridColumn: `1 / ${row.cells.length + 1}`,\n        },\n      },\n    ]\n  }\n  return [props, {}]\n}\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      gridLayout: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      gridLayout: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { columnId, headerIdWidths } = action\n    const columnWidth = getElementWidth(columnId)\n\n    if (columnWidth !== undefined) {\n      const startWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: getElementWidth(column.id),\n        }),\n        {}\n      )\n      const minWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.minWidth,\n        }),\n        {}\n      )\n      const maxWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.maxWidth,\n        }),\n        {}\n      )\n\n      const headerIdGridWidths = headerIdWidths.map(([headerId]) => [\n        headerId,\n        getElementWidth(headerId),\n      ])\n\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          startWidths,\n          minWidths,\n          maxWidths,\n          headerIdGridWidths,\n          columnWidth,\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX } = state.columnResizing\n    const {\n      columnWidth,\n      minWidths,\n      maxWidths,\n      headerIdGridWidths = [],\n    } = state.gridLayout\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdGridWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.min(\n        Math.max(\n          minWidths[headerId],\n          headerWidth + headerWidth * percentageDeltaX\n        ),\n        maxWidths[headerId]\n      )\n    })\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: {\n          ...state.gridLayout.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        startWidths: {},\n        minWidths: {},\n        maxWidths: {},\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}\n"],"names":["actions","init","defaultRenderer","value","emptyRenderer","React","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","ref","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","join","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","decorateColumn","userDefaultColumn","Footer","originalWidth","makeHeaderGroups","allColumns","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","addToExpandedRows","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","undefined","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","mid","floor","nums","sort","b","from","Set","size","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","aggregateFn","aggregate","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","_row$subRows","resKey","reSplitAlphaNumeric","compareBasic","getRowValuesByColumnID","row1","row2","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","getTime","alower","blower","replaceNonNumeric","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_oldRowState$cellStat","_rowsById$_rowId","_rowsById$_rowId$cell","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","raf","mostRecentClientX","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchEnd","window","cancelAnimationFrame","dispatchMove","scheduleDispatchMoveOnNextAnimationFrame","clientXPos","requestAnimationFrame","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","addEventListener","err","passiveEventSupported","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","totalColumnsMinWidth","flex","useGridLayout","gridTemplateColumns","gridLayout","_instance$state$colum","startWidths","gridColumn","getElementWidth","acc","minWidths","maxWidths","headerIdGridWidths","getElementById","_document$getElementB","offsetWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","instanceRef","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"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"}