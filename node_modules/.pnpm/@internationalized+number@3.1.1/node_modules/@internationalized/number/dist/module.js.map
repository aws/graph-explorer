{"mappings":"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","sources":["packages/@internationalized/number/src/index.ts","packages/@internationalized/number/src/NumberFormatter.ts","packages/@internationalized/number/src/NumberParser.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {NumberFormatOptions} from './NumberFormatter';\n\nexport {NumberFormatter} from './NumberFormatter';\nexport {NumberParser} from './NumberParser';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet supportsUnit = false;\ntry {\n  // @ts-ignore\n  supportsUnit = (new Intl.NumberFormat('de-DE', {style: 'unit', unit: 'degree'})).resolvedOptions().style === 'unit';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n      // Arabic?? But Safari already doesn't use Arabic digits so might be ok...\n      // https://bugs.webkit.org/show_bug.cgi?id=218139\n    }\n  }\n};\n\nexport interface NumberFormatOptions extends Intl.NumberFormatOptions {\n  /** Overrides default numbering system for the current locale. */\n  numberingSystem?: string\n}\n\ninterface NumberRangeFormatPart extends Intl.NumberFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/**\n * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.\n */\nexport class NumberFormatter implements Intl.NumberFormat {\n  private numberFormatter: Intl.NumberFormat;\n  private options: NumberFormatOptions;\n\n  constructor(locale: string, options: NumberFormatOptions = {}) {\n    this.numberFormatter = getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value: number): string {\n    let res = '';\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      res = numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);\n    } else {\n      res = this.numberFormatter.format(value);\n    }\n\n    if (this.options.style === 'unit' && !supportsUnit) {\n      let {unit, unitDisplay = 'short', locale} = this.resolvedOptions();\n      let values = UNITS[unit]?.[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value: number): Intl.NumberFormatPart[] {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n\n  /** Formats a number range as a string. */\n  formatRange(start: number, end: number): string {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start: number, end: number): NumberRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as NumberRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as NumberRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedNumberFormatOptions {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      options = {...options, signDisplay: this.options.signDisplay};\n    }\n\n    if (!supportsUnit && this.options.style === 'unit') {\n      options = {...options, style: 'unit', unit: this.options.unit, unitDisplay: this.options.unitDisplay};\n    }\n\n    return options;\n  }\n}\n\nfunction getCachedNumberFormatter(locale: string, options: NumberFormatOptions = {}): Intl.NumberFormat {\n  let {numberingSystem} = options;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) {\n    locale = `${locale}-u-nu-${numberingSystem}`;\n  }\n\n  if (options.style === 'unit' && !supportsUnit) {\n    let {unit, unitDisplay = 'short'} = options;\n    if (!unit) {\n      throw new Error('unit option must be provided with style: \"unit\"');\n    }\n    if (!UNITS[unit]?.[unitDisplay]) {\n      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    }\n    options = {...options, style: 'decimal'};\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\n/** @private - exported for tests */\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: string, num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\ninterface Symbols {\n  minusSign: string,\n  plusSign: string,\n  decimal: string,\n  group: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\n/**\n * A NumberParser can be used to perform locale-aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. It automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  private locale: string;\n  private options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(this.formatter, this.options, options);\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '')\n      .replace(this.symbols.decimal, '.')\n      .replace(this.symbols.minusSign, '-')\n      .replace(this.symbols.numeral, this.symbols.index);\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === 'percent') {\n      newValue /= 100;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed((this.options.maximumFractionDigits ?? 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace('-', this.symbols.minusSign);\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      value = value.replace(',', this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = replaceAll(value, '.', this.symbols.group);\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    value = replaceAll(value, this.symbols.group, '')\n      .replace(this.symbols.numeral, '')\n      .replace(this.symbols.decimal, '');\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction getSymbols(formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  let decimal = allParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? \n      new RegExp('[\\\\p{White_Space}]', 'gu') :\n      new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  // @ts-ignore\n  if (str.replaceAll) {\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n"],"names":[],"version":3,"file":"module.js.map"}