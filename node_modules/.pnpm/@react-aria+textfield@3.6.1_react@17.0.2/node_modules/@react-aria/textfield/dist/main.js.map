{"mappings":"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","sources":["packages/@react-aria/textfield/src/index.ts","packages/@react-aria/textfield/src/useTextField.ts","packages/@react-aria/textfield/src/useFormattedTextField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './useTextField';\nexport * from './useFormattedTextField';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {\n  ChangeEvent,\n  DOMFactory,\n  HTMLAttributes,\n  LabelHTMLAttributes,\n  ReactDOM,\n  RefObject\n} from 'react';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useField} from '@react-aria/label';\nimport {useFocusable} from '@react-aria/focus';\n\n/**\n * A map of HTML element names and their interface types.\n * For example `'a'` -> `HTMLAnchorElement`.\n */\ntype IntrinsicHTMLElements = {\n  [K in keyof IntrinsicHTMLAttributes]: IntrinsicHTMLAttributes[K] extends HTMLAttributes<infer T> ? T : never\n};\n\n/**\n * A map of HTML element names and their attribute interface types.\n * For example `'a'` -> `AnchorHTMLAttributes<HTMLAnchorElement>`.\n */\ntype IntrinsicHTMLAttributes = {\n  [K in keyof ReactDOM]: ReactDOM[K] extends DOMFactory<infer T, any> ? T : never\n};\n\ntype DefaultElementType = 'input';\n\n/**\n * The intrinsic HTML element names that `useTextField` supports; e.g. `input`,\n * `textarea`.\n */\ntype TextFieldIntrinsicElements = keyof Pick<IntrinsicHTMLElements, 'input' | 'textarea'>;\n\n /**\n  * The HTML element interfaces that `useTextField` supports based on what is\n  * defined for `TextFieldIntrinsicElements`; e.g. `HTMLInputElement`,\n  * `HTMLTextAreaElement`.\n  */\ntype TextFieldHTMLElementType = Pick<IntrinsicHTMLElements, TextFieldIntrinsicElements>;\n\n /**\n  * The HTML attributes interfaces that `useTextField` supports based on what\n  * is defined for `TextFieldIntrinsicElements`; e.g. `InputHTMLAttributes`,\n  * `TextareaHTMLAttributes`.\n  */\ntype TextFieldHTMLAttributesType = Pick<IntrinsicHTMLAttributes, TextFieldIntrinsicElements>;\n\n/**\n * The type of `inputProps` returned by `useTextField`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldInputProps<T extends TextFieldIntrinsicElements> = TextFieldHTMLAttributesType[T];\n\ninterface AriaTextFieldOptions<T extends TextFieldIntrinsicElements> extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: T\n}\n\n/**\n * The type of `ref` object that can be passed to `useTextField` based on the given\n * intrinsic HTML element name; e.g.`RefObject<HTMLInputElement>`,\n * `RefObject<HTMLTextAreaElement>`.\n */\ntype TextFieldRefObject<T extends TextFieldIntrinsicElements> = RefObject<TextFieldHTMLElementType[T]>;\n\nexport interface TextFieldAria<T extends TextFieldIntrinsicElements = DefaultElementType> {\n  /** Props for the input element. */\n  inputProps: TextFieldInputProps<T>,\n  /** Props for the text field's visible label element, if any. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the text field's description element, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n  /** Props for the text field's error message element, if any. */\n  errorMessageProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField<T extends TextFieldIntrinsicElements = DefaultElementType>(\n  props: AriaTextFieldOptions<T>,\n  ref: TextFieldRefObject<T>\n): TextFieldAria<T> {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  }: AriaTextFieldOptions<TextFieldIntrinsicElements> = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value: props.value,\n        defaultValue: props.value ? undefined : props.defaultValue,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n        autoComplete: props.autoComplete,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    ),\n    descriptionProps,\n    errorMessageProps\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {mergeProps} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TextFieldAria, useTextField} from './useTextField';\n\ninterface FormattedTextFieldState {\n  validate: (val: string) => boolean,\n  setInputValue: (val: string) => void\n}\n\n\nfunction supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' &&\n    window.InputEvent &&\n    // @ts-ignore\n    typeof InputEvent.prototype.getTargetRanges === 'function';\n}\n\nexport function useFormattedTextField(props: AriaTextFieldProps, state: FormattedTextFieldState, inputRef: RefObject<HTMLInputElement>): TextFieldAria {\n\n  let stateRef = useRef(state);\n  stateRef.current = state;\n\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  useEffect(() => {\n    if (!supportsNativeBeforeInputEvent()) {\n      return;\n    }\n\n    let input = inputRef.current;\n\n    let onBeforeInput = (e: InputEvent) => {\n      let state = stateRef.current;\n\n      // Compute the next value of the input if the event is allowed to proceed.\n      // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n      let nextValue: string;\n      switch (e.inputType) {\n        case 'historyUndo':\n        case 'historyRedo':\n          // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n          // because presumably the input would have already been validated previously.\n          return;\n        case 'deleteContent':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentForward':\n          // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n          // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n          // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n          // If we support additional locales in the future, this may need to change.\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentBackward':\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteSoftLineBackward':\n        case 'deleteHardLineBackward':\n          nextValue = input.value.slice(input.selectionStart);\n          break;\n        default:\n          if (e.data != null) {\n            nextValue =\n              input.value.slice(0, input.selectionStart) +\n              e.data +\n              input.value.slice(input.selectionEnd);\n          }\n          break;\n      }\n\n      // If we did not compute a value, or the new value is invalid, prevent the event\n      // so that the browser does not update the input text, move the selection, or add to\n      // the undo/redo stack.\n      if (nextValue == null || !state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    };\n\n    input.addEventListener('beforeinput', onBeforeInput, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n\n  let onBeforeInput = !supportsNativeBeforeInputEvent()\n    ? e => {\n      let nextValue =\n        e.target.value.slice(0, e.target.selectionStart) +\n        e.data +\n        e.target.value.slice(e.target.selectionEnd);\n\n      if (!state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    }\n    : null;\n\n  let {labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps} = useTextField(props, inputRef);\n\n  let compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(\n      textFieldProps,\n      {\n        onBeforeInput,\n        onCompositionStart() {\n          // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n          // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n          // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n          // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n          // nor would we want to cancel them because the input from the user is incomplete at that point.\n          // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n          // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n          // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n          // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n          // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n          // are implemented, there is no other way to prevent composed input.\n          // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n          let {value, selectionStart, selectionEnd} = inputRef.current;\n          compositionStartState.current = {value, selectionStart, selectionEnd};\n        },\n        onCompositionEnd() {\n          if (!state.validate(inputRef.current.value)) {\n            // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n            // But also update the value in React state as well so it is correct for future updates.\n            let {value, selectionStart, selectionEnd} = compositionStartState.current;\n            inputRef.current.value = value;\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n            state.setInputValue(value);\n          }\n        }\n      }\n    ),\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}