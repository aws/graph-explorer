{"mappings":";;;SEoCgB,yCAAQ,CAAC,KAAqB,EAAa,CAAC;IAC1D,GAAG,CAAC,CAAC,KACH,EAAE,UACF,KAAK,GACL,CAAiB,kBAAE,cAAc,GACjC,CAAY,aAAE,SAAS,qBACvB,gBAAgB,GAAG,CAAO,QAC5B,CAAC,GAAG,KAAK;IAET,EAAE,GAAG,YAAK,CAAC,EAAE;IACb,GAAG,CAAC,OAAO,GAAG,YAAK;IACnB,GAAG,CAAC,UAAU,GAAG,CAAC;IAAA,CAAC;IACnB,EAAE,EAAE,KAAK,EAAE,CAAC;QACV,cAAc,GAAG,cAAc,MAAM,cAAc,CAAC,CAAC,EAAE,OAAO,KAAK,OAAO;QAC1E,UAAU,GAAG,CAAC;YACZ,EAAE,EAAE,OAAO;YACX,OAAO,EAAE,gBAAgB,KAAK,CAAO,SAAG,EAAE,GAAG,SAAS;QACxD,CAAC;IACH,CAAC,MAAM,EAAE,GAAG,cAAc,KAAK,SAAS,EACtC,OAAO,CAAC,IAAI,CAAC,CAAsH;IAGrI,GAAG,CAAC,UAAU,GAAG,gBAAS,CAAC,CAAC;YAC1B,EAAE;QACF,CAAY,aAAE,SAAS;QACvB,CAAiB,kBAAE,cAAc;IACnC,CAAC;IAED,MAAM,CAAC,CAAC;oBACN,UAAU;oBACV,UAAU;IACZ,CAAC;AACH,CAAC;;;;SDtCe,yCAAQ,CAAC,KAAqB,EAAa,CAAC;IAC1D,GAAG,CAAC,CAAC,cAAA,WAAW,iBAAE,YAAY,oBAAE,eAAe,EAAA,CAAC,GAAG,KAAK;IACxD,GAAG,CAAC,CAAC,aAAA,UAAU,eAAE,UAAU,EAAA,CAAC,GAAG,yCAAQ,CAAC,KAAK;IAE7C,GAAG,CAAC,aAAa,GAAG,gBAAS,CAAC,CAAC;QAAA,OAAO,CAAC,WAAW;QAAG,OAAO,CAAC,YAAY;QAAG,eAAe;IAAA,CAAC;IAC5F,GAAG,CAAC,cAAc,GAAG,gBAAS,CAAC,CAAC;QAAA,OAAO,CAAC,WAAW;QAAG,OAAO,CAAC,YAAY;QAAG,eAAe;IAAA,CAAC;IAE7F,UAAU,GAAG,iBAAU,CAAC,UAAU,EAAE,CAAC;QACnC,CAAkB,mBAAE,CAAC;YACnB,aAAa;YACb,EAA0L,AAA1L,wLAA0L;YAC1L,cAAc;YACd,KAAK,CAAC,CAAkB;QAC1B,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAG,OAAK,SAAS;IAC1C,CAAC;IAED,MAAM,CAAC,CAAC;oBACN,UAAU;oBACV,UAAU;QACV,gBAAgB,EAAE,CAAC;YACjB,EAAE,EAAE,aAAa;QACnB,CAAC;QACD,iBAAiB,EAAE,CAAC;YAClB,EAAE,EAAE,cAAc;QACpB,CAAC;IACH,CAAC;AACH,CAAC","sources":["packages/@react-aria/label/src/index.ts","packages/@react-aria/label/src/useField.ts","packages/@react-aria/label/src/useLabel.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {AriaFieldProps, FieldAria} from './useField';\nexport type {LabelAriaProps, LabelAria} from './useLabel';\n\nexport {useField} from './useField';\nexport {useLabel} from './useLabel';\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, HelpTextProps, Validation} from '@react-types/shared';\nimport {LabelAria, LabelAriaProps, useLabel} from './useLabel';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\n\nexport interface AriaFieldProps extends LabelAriaProps, HelpTextProps, Omit<Validation, 'isRequired'> {}\n\nexport interface FieldAria extends LabelAria {\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the accessibility implementation for input fields.\n * Fields accept user input, gain context from their label, and may display a description or error message.\n * @param props - Props for the Field.\n */\nexport function useField(props: AriaFieldProps): FieldAria {\n  let {description, errorMessage, validationState} = props;\n  let {labelProps, fieldProps} = useLabel(props);\n\n  let descriptionId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  let errorMessageId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n\n  fieldProps = mergeProps(fieldProps, {\n    'aria-describedby': [\n      descriptionId,\n      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n      errorMessageId,\n      props['aria-describedby']\n    ].filter(Boolean).join(' ') || undefined\n  });\n\n  return {\n    labelProps,\n    fieldProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMAttributes, DOMProps, LabelableProps} from '@react-types/shared';\nimport {ElementType, LabelHTMLAttributes} from 'react';\nimport {useId, useLabels} from '@react-aria/utils';\n\nexport interface LabelAriaProps extends LabelableProps, DOMProps, AriaLabelingProps {\n  /**\n   * The HTML element used to render the label, e.g. 'label', or 'span'.\n   * @default 'label'\n   */\n  labelElementType?: ElementType\n}\n\nexport interface LabelAria {\n  /** Props to apply to the label container element. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to apply to the field container element being labeled. */\n  fieldProps: AriaLabelingProps & DOMProps\n}\n\n/**\n * Provides the accessibility implementation for labels and their associated elements.\n * Labels provide context for user inputs.\n * @param props - The props for labels and fields.\n */\nexport function useLabel(props: LabelAriaProps): LabelAria {\n  let {\n    id,\n    label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n\n  id = useId(id);\n  let labelId = useId();\n  let labelProps = {};\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  let fieldProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n\n  return {\n    labelProps,\n    fieldProps\n  };\n}\n"],"names":[],"version":3,"file":"module.js.map"}