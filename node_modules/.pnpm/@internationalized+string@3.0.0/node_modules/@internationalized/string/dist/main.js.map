{"mappings":"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","sources":["packages/@internationalized/string/src/index.ts","packages/@internationalized/string/src/LocalizedStringDictionary.ts","packages/@internationalized/string/src/LocalizedStringFormatter.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {Variables, LocalizedString} from './LocalizedStringFormatter';\nexport type {LocalizedStrings} from './LocalizedStringDictionary';\nexport {LocalizedStringDictionary} from './LocalizedStringDictionary';\nexport {LocalizedStringFormatter} from './LocalizedStringFormatter';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedString} from './LocalizedStringFormatter';\n\nexport type LocalizedStrings<K extends string, T extends LocalizedString> = {\n  [lang: string]: Record<K, T>\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class LocalizedStringDictionary<K extends string = string, T extends LocalizedString = string> {\n  private strings: LocalizedStrings<K, T>;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings<K, T>, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.strings = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  /** Returns a localized string for the given key and locale. */\n  getStringForLocale(key: K, locale: string): T {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale<K extends string, T extends LocalizedString>(locale: string, strings: LocalizedStrings<K, T>, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedStringDictionary} from './LocalizedStringDictionary';\n\nexport type Variables = Record<string, string | number | boolean> | undefined;\nexport type LocalizedString = string | ((args: Variables, formatter?: LocalizedStringFormatter<any, any>) => string);\ntype InternalString = string | (() => string);\n\nconst pluralRulesCache = new Map<string, Intl.PluralRules>();\nconst numberFormatCache = new Map<string, Intl.NumberFormat>();\n\n/**\n * Formats localized strings from a LocalizedStringDictionary. Supports interpolating variables,\n * selecting the correct pluralization, and formatting numbers for the locale.\n */\nexport class LocalizedStringFormatter<K extends string = string, T extends LocalizedString = string> {\n  private locale: string;\n  private strings: LocalizedStringDictionary<K, T>;\n\n  constructor(locale: string, strings: LocalizedStringDictionary<K, T>) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n  /** Formats a localized string for the given key with the provided variables. */\n  format(key: K, variables?: Variables): string {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === 'function' ? message(variables, this) : message;\n  }\n\n  protected plural(count: number, options: Record<string, InternalString>, type: Intl.PluralRuleType = 'cardinal') {\n    let opt = options['=' + count];\n    if (opt) {\n      return typeof opt === 'function' ? opt() : opt;\n    }\n\n    let key = this.locale + ':' + type;\n    let pluralRules = pluralRulesCache.get(key);\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {type});\n      pluralRulesCache.set(key, pluralRules);\n    }\n\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n\n  protected number(value: number) {\n    let numberFormat = numberFormatCache.get(this.locale);\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      numberFormatCache.set(this.locale, numberFormat);\n    }\n    return numberFormat.format(value);\n  }\n\n  protected select(options: Record<string, InternalString>, value: string) {\n    let opt = options[value] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n}\n"],"names":[],"version":3,"file":"main.js.map"}