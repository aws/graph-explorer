{"version":3,"file":"index.js","sources":["../src/util/location.ts","../src/parse-error/credentials.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scopeflags.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/options.ts","../src/parser/lval.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync?: boolean | null,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node as N.AnyExport;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b0000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b0000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b0000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b0001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b0010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b0100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b1000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                 ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number;\n  end: number;\n  comments: Array<Comment>;\n  leadingNode: Node | null;\n  trailingNode: Node | null;\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Undone<Node>} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport { type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n\n    // TODO(Babel 8): This is only needed for backwards compatibility,\n    // we can remove it.\n    containsInvalid: !!firstInvalidLoc,\n  };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return ((isAsync ? PARAM_AWAIT : 0) |\n    (isGenerator ? PARAM_YIELD : 0)) as ParamKind;\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  // TODO\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length] as ParseError<any>,\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, loc.index, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context?: string | null, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const decl = super.parseExport(node, decorators);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(FlowErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(\n                  this.jsxParseSpreadChild(node as Undone<N.JSXSpreadChild>),\n                );\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(\n                    node as Undone<N.JSXExpressionContainer>,\n                    tc.j_expr,\n                  ),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName as N.Identifier;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate as N.TsThisType;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate as N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n            /* decorators */ null,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node as Undone<N.TsModuleDeclaration>;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, {\n                at: this.state.startLoc,\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(TSErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      context?: string | null,\n      topLevel?: boolean | null,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(\n            classBody,\n            member as any as N.StaticBlock,\n          );\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholedrs = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholedrs;\n\ntype NodeOf<T extends keyof PossiblePlaceholedrs> = PossiblePlaceholedrs[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    hasFollowingIdentifier(context?: string | null): boolean {\n      if (super.hasFollowingIdentifier(context)) {\n        return true;\n      }\n\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport type { ParamKind } from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(\n    node: N.BodilessFunctionOrMethodBase,\n    isAsync?: boolean | null,\n  ): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        (this.prodParam.currentFlags() | PARAM_RETURN) as ParamKind,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context?: string | null): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingIdentifier(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  hasFollowingIdentifier(context?: string | null): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  startsUsingForOf(): boolean {\n    const lookahead = this.lookahead();\n    if (lookahead.type === tt._of && !lookahead.containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean,\n  ): N.Statement {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean | null,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !context,\n        );\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (this.hasFollowingLineBreak()) {\n          break;\n        }\n      // fall through\n      case tt._let:\n        if (this.state.containsEsc || !this.hasFollowingIdentifier(context)) {\n          break;\n        }\n      // fall through\n      case tt._const:\n      case tt._var: {\n        const kind = this.state.value;\n        if (kind === \"using\") {\n          this.expectPlugin(\"explicitResourceManagement\");\n          if (!this.scope.inModule && this.scope.inTopLevel) {\n            this.raise(Errors.UnexpectedUsingDeclaration, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !context,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        context,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      !!this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      classNode.decorators = maybeDecorators;\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const startsWithUsing =\n      this.isContextual(tt._using) && !this.hasFollowingLineBreak();\n    const isLetOrUsing =\n      (startsWithLet && this.hasFollowingIdentifier()) ||\n      (startsWithUsing &&\n        this.hasFollowingIdentifier() &&\n        this.startsUsingForOf());\n    if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      const isForIn = this.match(tt._in);\n      if (isForIn && startsWithUsing) {\n        this.raise(Errors.ForInUsing, { at: init });\n      }\n      if (\n        (isForIn || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    context?: string | null,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" && id.type !== \"Identifier\") {\n      this.raise(Errors.UsingDeclarationHasBindingPattern, { at: id });\n    }\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    statement: number = FUNC_NO_FLAGS,\n    isAsync: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr as Undone<N.FunctionExpression>,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatement(null) as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    if (node.module) {\n      if (\n        node.specifiers.length !== 1 ||\n        node.specifiers[0].type !== \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  parseMaybeImportReflection(node: Undone<N.ImportDeclaration>) {\n    let isImportReflection = false;\n    if (this.isContextual(tt._module)) {\n      const lookahead = this.lookahead();\n      if (tokenIsIdentifier(lookahead.type)) {\n        if (lookahead.type !== tt._from) {\n          // import module x\n          isImportReflection = true;\n        } else {\n          const nextNextTokenFirstChar = this.input.charCodeAt(\n            this.nextTokenStartSince(lookahead.end),\n          );\n          if (nextNextTokenFirstChar === charCodes.lowercaseF) {\n            // import module from from ...\n            isImportReflection = true;\n          }\n        }\n      } else {\n        // import module { x } ...\n        // This is invalid, we will continue parsing and throw\n        // a recoverable error later\n        isImportReflection = true;\n      }\n    }\n    if (isImportReflection) {\n      this.expectPlugin(\"importReflection\");\n      this.next(); // eat tt._module;\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      this.parseMaybeImportReflection(node);\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","ImportMetaOutsideModule","message","code","SourceTypeModuleError","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","SyntaxError","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","rest","_excluded2","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","decorators","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","finishNodeAt","endLoc","resetStartLocation","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","TypeScriptParserMixin","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","parseExprOp","leftStartLoc","minPrec","isSatisfies","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","hasFollowingIdentifier","verifyBreakContinue","isBreak","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","arg","toReferencedListDeep","parseSpread","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","endCh","startsUsingForOf","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithUsing","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","statement","isHangingStatement","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseMaybeImportReflection","isImportReflection","nextNextTokenFirstChar","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}