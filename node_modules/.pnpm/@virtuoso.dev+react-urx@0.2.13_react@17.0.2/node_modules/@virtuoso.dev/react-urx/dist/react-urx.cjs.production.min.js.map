{"version":3,"file":"react-urx.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * `@virtuoso.dev/react-urx` exports the [[systemToComponent]] function.\n * It wraps urx systems in to UI **logic provider components**,\n * mapping the system input and output streams to the component input / output points.\n *\n * ### Simple System wrapped as React Component\n *\n * ```tsx\n * const sys = system(() => {\n *   const foo = statefulStream(42)\n *   return { foo }\n * })\n *\n * const { Component: MyComponent, useEmitterValue } = systemToComponent(sys, {\n *   required: { fooProp: 'foo' },\n * })\n *\n * const Child = () => {\n *   const foo = useEmitterValue('foo')\n *   return <div>{foo}</div>\n * }\n *\n * const App = () => {\n *   return <Comp fooProp={42}><Child /><Comp>\n * }\n * ```\n *\n * @packageDocumentation\n */\nimport * as React from 'react'\nimport {\n  ComponentType,\n  createContext,\n  createElement,\n  forwardRef,\n  ForwardRefExoticComponent,\n  ReactNode,\n  RefAttributes,\n  useContext,\n  useImperativeHandle,\n  useState,\n  useCallback,\n} from 'react'\nimport {\n  AnySystemSpec,\n  reset,\n  curry1to0,\n  curry2to1,\n  Emitter,\n  SR,\n  eventHandler,\n  getValue,\n  publish,\n  Publisher,\n  init,\n  StatefulStream,\n  Stream,\n  subscribe,\n  always,\n  tap,\n} from '@virtuoso.dev/urx'\n\n/** @internal */\ninterface Dict<T> {\n  [key: string]: T\n}\n\n/** @internal */\nfunction omit<O extends Dict<any>, K extends readonly string[]>(keys: K, obj: O): Omit<O, K[number]> {\n  var result = {} as Dict<any>\n  var index = {} as Dict<1>\n  var idx = 0\n  var len = keys.length\n\n  while (idx < len) {\n    index[keys[idx]] = 1\n    idx += 1\n  }\n\n  for (var prop in obj) {\n    if (!index.hasOwnProperty(prop)) {\n      result[prop] = obj[prop]\n    }\n  }\n\n  return result as any\n}\n\nconst useIsomorphicLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\n/** @internal */\nexport type Observable<T> = Emitter<T> | Publisher<T>\n\n/**\n * Describes the mapping between the system streams and the component properties.\n * Each property uses the keys as the names of the properties and the values as the corresponding stream names.\n * @typeParam SS the type of the system.\n */\nexport interface SystemPropsMap<SS extends AnySystemSpec, K = keyof SR<SS>, D = { [key: string]: K }> {\n  /**\n   * Specifies the required component properties.\n   */\n  required?: D\n  /**\n   * Specifies the optional component properties.\n   */\n  optional?: D\n  /**\n   * Specifies the component methods, if any. Streams are converted to methods with a single argument.\n   * When invoked, the method publishes the value of the argument to the specified stream.\n   */\n  methods?: D\n  /**\n   * Specifies the component \"event\" properties, if any.\n   * Event properties accept callback functions which get executed when the stream emits a new value.\n   */\n  events?: D\n}\n\n/** @internal */\nexport type PropsFromPropMap<E extends AnySystemSpec, M extends SystemPropsMap<E>> = {\n  [K in Extract<keyof M['required'], string>]: M['required'][K] extends string\n    ? SR<E>[M['required'][K]] extends Observable<infer R>\n      ? R\n      : never\n    : never\n} &\n  {\n    [K in Extract<keyof M['optional'], string>]?: M['optional'][K] extends string\n      ? SR<E>[M['optional'][K]] extends Observable<infer R>\n        ? R\n        : never\n      : never\n  } &\n  {\n    [K in Extract<keyof M['events'], string>]?: M['events'][K] extends string\n      ? SR<E>[M['events'][K]] extends Observable<infer R>\n        ? (value: R) => void\n        : never\n      : never\n  }\n\n/** @internal */\nexport type MethodsFromPropMap<E extends AnySystemSpec, M extends SystemPropsMap<E>> = {\n  [K in Extract<keyof M['methods'], string>]: M['methods'][K] extends string\n    ? SR<E>[M['methods'][K]] extends Observable<infer R>\n      ? (value: R) => void\n      : never\n    : never\n}\n\n/**\n * Used to correctly specify type refs for system components\n *\n * ```tsx\n * const s = system(() => { return { a: statefulStream(0) } })\n * const { Component } = systemToComponent(s)\n *\n * const App = () => {\n *  const ref = useRef<RefHandle<typeof Component>>()\n *  return <Component ref={ref} />\n * }\n * ```\n *\n * @typeParam T the type of the component\n */\nexport type RefHandle<T> = T extends ForwardRefExoticComponent<RefAttributes<infer Handle>> ? Handle : never\n\n/**\n * Converts a system spec to React component by mapping the system streams to component properties, events and methods. Returns hooks for querying and modifying\n * the system streams from the component's child components.\n * @param systemSpec The return value from a [[system]] call.\n * @param map The streams to props / events / methods mapping Check [[SystemPropsMap]] for more details.\n * @param Root The optional React component to render. By default, the resulting component renders nothing, acting as a logical wrapper for its children.\n * @returns an object containing the following:\n *  - `Component`: the React component.\n *  - `useEmitterValue`: a hook that lets child components use values emitted from the specified output stream.\n *  - `useEmitter`: a hook that calls the provided callback whenever the specified stream emits a value.\n *  - `usePublisher`: a hook which lets child components publish values to the specified stream.\n *  <hr />\n */\nexport function systemToComponent<SS extends AnySystemSpec, M extends SystemPropsMap<SS>, S extends SR<SS>, R>(\n  systemSpec: SS,\n  map: M,\n  Root?: R\n) {\n  const requiredPropNames = Object.keys(map.required || {})\n  const optionalPropNames = Object.keys(map.optional || {})\n  const methodNames = Object.keys(map.methods || {})\n  const eventNames = Object.keys(map.events || {})\n  const Context = createContext<SR<SS>>(({} as unknown) as any)\n\n  type RootCompProps = R extends ComponentType<infer RP> ? RP : { children?: ReactNode }\n\n  type CompProps = PropsFromPropMap<SS, M> & RootCompProps\n\n  type CompMethods = MethodsFromPropMap<SS, M>\n\n  function applyPropsToSystem(system: ReturnType<SS['constructor']>, props: any) {\n    if (system['propsReady']) {\n      publish(system['propsReady'], false)\n    }\n\n    for (const requiredPropName of requiredPropNames) {\n      const stream = system[map.required![requiredPropName]]\n      publish(stream, (props as any)[requiredPropName])\n    }\n\n    for (const optionalPropName of optionalPropNames) {\n      if (optionalPropName in props) {\n        const stream = system[map.optional![optionalPropName]]\n        publish(stream, (props as any)[optionalPropName])\n      }\n    }\n\n    if (system['propsReady']) {\n      publish(system['propsReady'], true)\n    }\n  }\n\n  function buildMethods(system: ReturnType<SS['constructor']>) {\n    return methodNames.reduce((acc, methodName) => {\n      ;(acc as any)[methodName] = (value: any) => {\n        const stream = system[map.methods![methodName]]\n        publish(stream, value)\n      }\n      return acc\n    }, {} as CompMethods)\n  }\n\n  function buildEventHandlers(system: ReturnType<SS['constructor']>) {\n    return eventNames.reduce((handlers, eventName) => {\n      handlers[eventName] = eventHandler(system[map.events![eventName]])\n      return handlers\n    }, {} as { [key: string]: Emitter<any> })\n  }\n\n  /**\n   * A React component generated from an urx system\n   */\n  const Component = forwardRef<CompMethods, CompProps>((propsWithChildren, ref) => {\n    const { children, ...props } = propsWithChildren as any\n\n    const [system] = useState(() => {\n      return tap(init(systemSpec), system => applyPropsToSystem(system, props))\n    })\n\n    const [handlers] = useState(curry1to0(buildEventHandlers, system))\n\n    useIsomorphicLayoutEffect(() => {\n      for (const eventName of eventNames) {\n        if (eventName in props) {\n          subscribe(handlers[eventName], props[eventName])\n        }\n      }\n      return () => {\n        Object.values(handlers).map(reset)\n      }\n    }, [props, handlers, system])\n\n    useIsomorphicLayoutEffect(() => {\n      applyPropsToSystem(system, props)\n    })\n\n    useImperativeHandle(ref, always(buildMethods(system)))\n\n    return createElement(\n      Context.Provider,\n      { value: system },\n      Root\n        ? createElement(\n            (Root as unknown) as ComponentType,\n            omit([...requiredPropNames, ...optionalPropNames, ...eventNames], props),\n            children\n          )\n        : children\n    )\n  })\n\n  const usePublisher = <K extends keyof S>(key: K) => {\n    return useCallback(curry2to1(publish, React.useContext(Context)[key]), [key]) as (\n      value: S[K] extends Stream<infer R> ? R : never\n    ) => void\n  }\n\n  /**\n   * Returns the value emitted from the stream.\n   */\n  const useEmitterValue = <K extends keyof S, V = S[K] extends StatefulStream<infer R> ? R : never>(key: K) => {\n    const context = useContext(Context)\n    const source: StatefulStream<V> = context[key]\n\n    const [value, setValue] = useState(curry1to0(getValue, source))\n\n    useIsomorphicLayoutEffect(\n      () =>\n        subscribe(source, (next: V) => {\n          if (next !== value) {\n            setValue(always(next))\n          }\n        }),\n      [source, value]\n    )\n\n    return value\n  }\n\n  const useEmitter = <K extends keyof S, V = S[K] extends Stream<infer R> ? R : never>(key: K, callback: (value: V) => void) => {\n    const context = useContext(Context)\n    const source: Stream<V> = context[key]\n    useIsomorphicLayoutEffect(() => subscribe(source, callback), [callback, source])\n  }\n\n  return {\n    Component,\n    usePublisher,\n    useEmitterValue,\n    useEmitter,\n  }\n}\n"],"names":["useIsomorphicLayoutEffect","document","React","systemSpec","map","Root","requiredPropNames","Object","keys","required","optionalPropNames","optional","methodNames","methods","eventNames","events","Context","createContext","applyPropsToSystem","system","props","publish","requiredPropName","optionalPropName","buildEventHandlers","reduce","handlers","eventName","eventHandler","Component","forwardRef","propsWithChildren","ref","children","useState","tap","init","curry1to0","subscribe","values","reset","useImperativeHandle","always","acc","methodName","value","buildMethods","createElement","Provider","obj","result","index","idx","len","length","prop","hasOwnProperty","omit","usePublisher","key","useCallback","curry2to1","useEmitterValue","source","useContext","getValue","setValue","next","useEmitter","callback"],"mappings":"68BAwFMA,EAAgD,oBAAbC,SAA2BC,kBAAwBA,+CA8F1FC,EACAC,EACAC,OAEMC,EAAoBC,OAAOC,KAAKJ,EAAIK,UAAY,IAChDC,EAAoBH,OAAOC,KAAKJ,EAAIO,UAAY,IAChDC,EAAcL,OAAOC,KAAKJ,EAAIS,SAAW,IACzCC,EAAaP,OAAOC,KAAKJ,EAAIW,QAAU,IACvCC,EAAUC,gBAAuB,aAQ9BC,EAAmBC,EAAuCC,GAC7DD,EAAM,YACRE,UAAQF,EAAM,YAAgB,iBAGDb,kBAAmB,KAAvCgB,UAETD,UADeF,EAAOf,EAAIK,SAAUa,IACnBF,EAAcE,kBAGFZ,kBAAmB,KAAvCa,UACLA,KAAoBH,GAEtBC,UADeF,EAAOf,EAAIO,SAAUY,IACnBH,EAAcG,IAI/BJ,EAAM,YACRE,UAAQF,EAAM,YAAgB,YAczBK,EAAmBL,UACnBL,EAAWW,QAAO,SAACC,EAAUC,UAClCD,EAASC,GAAaC,eAAaT,EAAOf,EAAIW,OAAQY,KAC/CD,IACN,UA+EE,CACLG,UA1EgBC,cAAmC,SAACC,EAAmBC,OAC/DC,EAAuBF,EAAvBE,SAAab,qIAAUW,KAExBZ,EAAUe,YAAS,kBACjBC,MAAIC,OAAKjC,IAAa,SAAAgB,UAAUD,EAAmBC,EAAQC,YAG7DM,EAAYQ,WAASG,YAAUb,EAAoBL,cAE1DnB,GAA0B,yBACAc,kBAAY,KAAzBa,UACLA,KAAaP,GACfkB,YAAUZ,EAASC,GAAYP,EAAMO,WAGlC,WACLpB,OAAOgC,OAAOb,GAAUtB,IAAIoC,YAE7B,CAACpB,EAAOM,EAAUP,IAErBnB,GAA0B,WACxBkB,EAAmBC,EAAQC,MAG7BqB,sBAAoBT,EAAKU,kBA5CLvB,UACbP,EAAYa,QAAO,SAACkB,EAAKC,UAC5BD,EAAYC,GAAc,SAACC,GAE3BxB,UADeF,EAAOf,EAAIS,QAAS+B,IACnBC,IAEXF,IACN,IAqC6BG,CAAa3B,KAEtC4B,gBACL/B,EAAQgC,SACR,CAAEH,MAAO1B,GACTd,EACI0C,gBACG1C,EA3Mb,SAAgEG,EAASyC,WACnEC,EAAS,GACTC,EAAQ,GACRC,EAAM,EACNC,EAAM7C,EAAK8C,OAERF,EAAMC,GACXF,EAAM3C,EAAK4C,IAAQ,EACnBA,GAAO,MAGJ,IAAIG,KAAQN,EACVE,EAAMK,eAAeD,KACxBL,EAAOK,GAAQN,EAAIM,WAIhBL,EA2LGO,WAASnD,EAAsBI,EAAsBI,GAAaM,GAClEa,GAEFA,MAwCNyB,aApCmB,SAAoBC,UAChCC,cAAYC,YAAUxC,UAASnB,aAAiBc,GAAS2C,IAAO,CAACA,KAoCxEG,gBA5BsB,SAA0EH,OAE1FI,EADUC,aAAWhD,GACe2C,KAEhBzB,WAASG,YAAU4B,WAAUF,IAAhDlB,OAAOqB,cAEdlE,GACE,kBACEsC,YAAUyB,GAAQ,SAACI,GACbA,IAAStB,GACXqB,EAASxB,SAAOyB,SAGtB,CAACJ,EAAQlB,IAGJA,GAaPuB,WAViB,SAAkET,EAAQU,OAErFN,EADUC,aAAWhD,GACO2C,GAClC3D,GAA0B,kBAAMsC,YAAUyB,EAAQM,KAAW,CAACA,EAAUN"}